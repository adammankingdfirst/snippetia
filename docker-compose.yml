version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: snippetia-postgres
    environment:
      POSTGRES_DB: snippetia
      POSTGRES_USER: snippetia
      POSTGRES_PASSWORD: password
      POSTGRES_MULTIPLE_DATABASES: snippetia_test
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/main/resources/db/init:/docker-entrypoint-initdb.d
    networks:
      - snippetia-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U snippetia"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: snippetia-redis
    command: redis-server --appendonly yes --requirepass redispassword
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - snippetia-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "redispassword", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: snippetia-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - snippetia-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MongoDB for analytics and logs
  mongodb:
    image: mongo:7.0
    container_name: snippetia-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: snippetia_analytics
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - snippetia-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ for message queuing
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: snippetia-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - snippetia-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: snippetia-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - snippetia-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: snippetia-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - snippetia-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO for object storage (S3 compatible)
  minio:
    image: minio/minio:latest
    container_name: snippetia-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - snippetia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: snippetia-backend
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=snippetia
      - DB_USERNAME=snippetia
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redispassword
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - MONGODB_HOST=mongodb
      - MONGODB_PORT=27017
      - MONGODB_USERNAME=admin
      - MONGODB_PASSWORD=password
      - MONGODB_DATABASE=snippetia_analytics
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=admin
      - RABBITMQ_PASSWORD=password
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production-make-it-very-long-and-secure
      - ENCRYPTION_KEY=your-encryption-key-32-chars-long
      - OPENAI_API_KEY=your-openai-api-key
      - STRIPE_SECRET_KEY=your-stripe-secret-key
      - GITHUB_CLIENT_ID=your-github-client-id
      - GITHUB_CLIENT_SECRET=your-github-client-secret
      - DISCORD_CLIENT_ID=your-discord-client-id
      - DISCORD_CLIENT_SECRET=your-discord-client-secret
      - TWITCH_CLIENT_ID=your-twitch-client-id
      - TWITCH_CLIENT_SECRET=your-twitch-client-secret
      - GOOGLE_CLIENT_ID=your-google-client-id
      - GOOGLE_CLIENT_SECRET=your-google-client-secret
    ports:
      - "8080:8080"
      - "8081:8081" # Management port
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - snippetia-network
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # AI Service (Python-based)
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: snippetia-ai-service
    environment:
      - OPENAI_API_KEY=your-openai-api-key
      - HUGGINGFACE_API_KEY=your-huggingface-api-key
      - REDIS_URL=redis://admin:redispassword@redis:6379/1
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    ports:
      - "8082:8000"
    depends_on:
      - redis
      - kafka
    networks:
      - snippetia-network
    volumes:
      - ./ai-service/models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Code Execution Service
  code-runner:
    build:
      context: ./code-runner
      dockerfile: Dockerfile
    container_name: snippetia-code-runner
    environment:
      - REDIS_URL=redis://admin:redispassword@redis:6379/2
      - MAX_EXECUTION_TIME=30
      - MAX_MEMORY_MB=512
      - ALLOWED_LANGUAGES=javascript,python,java,kotlin,go,rust,cpp,csharp
    ports:
      - "8083:8000"
    depends_on:
      - redis
    networks:
      - snippetia-network
    security_opt:
      - seccomp:unconfined
    cap_add:
      - SYS_PTRACE
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend Web App
  frontend-web:
    build:
      context: ./frontend
      dockerfile: Dockerfile.web
    container_name: snippetia-frontend-web
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - snippetia-network
    environment:
      - VITE_API_URL=http://localhost:8080/api/v1
      - VITE_WS_URL=ws://localhost:8080/ws
      - VITE_STRIPE_PUBLISHABLE_KEY=your-stripe-publishable-key
      - VITE_GOOGLE_ANALYTICS_ID=your-ga-id
      - VITE_SENTRY_DSN=your-sentry-dsn

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: snippetia-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/static:/usr/share/nginx/html/static
    depends_on:
      - backend
      - frontend-web
    networks:
      - snippetia-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: snippetia-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    networks:
      - snippetia-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: snippetia-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - snippetia-network
    depends_on:
      - prometheus

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: snippetia-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - snippetia-network

  # ELK Stack for logging
  elasticsearch-logs:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: snippetia-elasticsearch-logs
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9201:9200"
    volumes:
      - elasticsearch_logs_data:/usr/share/elasticsearch/data
    networks:
      - snippetia-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: snippetia-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./monitoring/logstash/config:/usr/share/logstash/config
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    networks:
      - snippetia-network
    depends_on:
      - elasticsearch-logs

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: snippetia-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-logs:9200
    networks:
      - snippetia-network
    depends_on:
      - elasticsearch-logs

  # Security scanning service
  security-scanner:
    build:
      context: ./security-scanner
      dockerfile: Dockerfile
    container_name: snippetia-security-scanner
    environment:
      - VIRUSTOTAL_API_KEY=your-virustotal-api-key
      - REDIS_URL=redis://admin:redispassword@redis:6379/3
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - redis
      - kafka
    networks:
      - snippetia-network
    volumes:
      - ./security-scanner/quarantine:/app/quarantine

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: snippetia-backup
    environment:
      - PGPASSWORD=password
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - snippetia-network
    depends_on:
      - postgres
    command: >
      sh -c "
        chmod +x /backup.sh &&
        crond -f -d 8
      "

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  elasticsearch_logs_data:
  mongodb_data:
  rabbitmq_data:
  kafka_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  snippetia-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16